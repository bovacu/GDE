#pragma once

#include <iostream>
#include "core/util/Util.h"

#if IS_MOBILE()
    #include <GLES3/gl32.h>
#elif IS_DESKTOP()
    #include <glad/glad.h>
#endif

namespace GDE {

    class Texture;

    /**
     * @brief Defines how the texture must be rendered so deformations on X and Y won't affect it's quality. It is separated 9 parts as follows:
     * 
     *       ____|____________|____
     *      | 6  |     7      | 8  |
     *      |----|------------|----| top
     *      |    |            |    |
     *      | 3  |     4      | 5  |
     *      |    |            |    |
     *      |----|------------|----| bottom
     *      |_0__|_____1______|_2__|
     *           |            |
     *          left         right
     * 
     * 
     *  Elements 0, 2, 6 and 8 doesn't get streched.
     *  Elements 3 and 5 get streched in Y axis.
     *  Elements 1 and 7 get streched in X axis.
     *  Element 4 gets streched in XY axis.
     * 
     */
    struct NinePatch {
        /**
         * @brief Left separator line
         * 
         */
        int left = -1;

        /**
         * @brief Top separator line
         * 
         */
        int top = -1;

        /**
         * @brief Right separator line
         * 
         */
        int right = -1;

        /**
         * @brief Bottom separator line
         * 
         */
        int bottom = -1;

        /**
         * @brief Returns if the Sprite has or not 9Patch.
         * 
         * @return true 
         * @return false 
         */
        [[nodiscard]] bool isEnabled() const {
            return left != -1 && top != -1 && right != -1 && bottom != -1;
        }

        /**
         * @brief The resulting subrects generated by the 9Patch config.
         * 
         */
        IntRect subRects[9];
    };

    class Atlas;
    class Texture {
        protected:
            unsigned int refCount = 0;
            GLuint openGLTextureID{};
            int channels = -1;
            Vec2I textureSize, spriteSheetSize;
            GLenum internalFormat = -1, dataFormat = -1;
            IntRect region {};
            float fileSizeKb = -1;
            std::string path;

        public:
            NinePatch ninePatch;

        public:
            Texture() = default;
            explicit Texture(char* filePath);
            Texture(Atlas* _spriteSheet, const IntRect& _region);
            ~Texture();
            [[nodiscard]] GLuint getGLTexture() const;
            [[nodiscard]] Vec2I getSize() const;
            [[nodiscard]] Vec2I getSpriteSheetSize() const;
            [[nodiscard]] float getKb() const;

            bool loadFromFile(const char* _path);
            bool loadTextTexture(int _width, int _height);
            bool loadTextureFromMemory(int _width, int _height, const unsigned char* _data);
            bool loadTextSubTextures(Vec2I _offset, Vec2I _size, const void* _data);

            IntRect& getRegion();
            [[nodiscard]]std::string getPath();

        private:
            int invertSDLSurface(SDL_Surface *surface);
            SDL_Surface* getSDLSurface(SDL_RWops* _imageFile, const std::string& _pathToFile);
            void checkGLError();
    };

    enum ImageType {
        PNG,
        JPG,
        BMP
    };

    class Image : public Texture {
        private:
            unsigned char* pixels = nullptr;
            ImageType imageType;

        private:
            int getChannels(const ImageType& _imageType);

        public:
            Image() = default;
            void init(int _width, int _height, unsigned char* _pixels, const ImageType& _imageType);
            void init(int _width, int _height, const ImageType& _imageType);
            void uploadToGPU();
            void saveAs(const std::string& _pathToSave);
            void setPixel(int _x, int _y, const Color& _color);
            Color getPixel(int _x, int _y);
            ~Image();
    };
}