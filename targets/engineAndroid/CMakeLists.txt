cmake_minimum_required(VERSION 3.10)

# Instruct our compiler that we want to use C++ 17 and use exceptions.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -fexceptions")

# Determine what build type we are in, shifted to lower case (debug or release).
string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_VARIANT_DIR)

# Location of our third party libraries.
set(SDL_DIR "${CMAKE_SOURCE_DIRECTORY}/SDL")
set(SDL_MIXER_DIR "${CMAKE_SOURCE_DIRECTORY}/SDL_mixer")
set(SDL_NET_DIR "${CMAKE_SOURCE_DIRECTORY}/SDL_net")
set(FREETYPE_DIR "${CMAKE_SOURCE_DIRECTORY}/freetype")
set(GLM_DIR "${CMAKE_SOURCE_DIRECTORY}/glm")

# Location of our own shared C++ code base.
#set(MAIN_SOURCE_DIR "src")
set(MAIN_SOURCE_DIR "../../engine/src")

set(EXTERNAL_STB "../../engine/src/stb")
set(EXTERNAL_IMGUI "../../external/imgui")

# Location of the .so files generated by the 'sdl' module.
set(SDL_SO_DIR "${CMAKE_SOURCE_DIR}/sdl/build/intermediates/ndkBuild/${BUILD_VARIANT_DIR}/lib/${ANDROID_ABI}")

# This is a dependency target for SDL, we will name it 'hidapi'.
add_library(
        hidapi
        SHARED
        IMPORTED
)

# This is the main SDL library target, we will name it 'sdl2'.
add_library(
        sdl2
        SHARED
        IMPORTED
)

add_library(
        sdl2_mixer
        SHARED
        IMPORTED
)

add_library(
        sdl2_net
        SHARED
        IMPORTED
)

add_library(
    mpg123
    SHARED
    IMPORTED
)

add_subdirectory(freetype)
add_subdirectory(glm)

# This is the built in NDK logging library
find_library(log-lib log)

# We need to tell the C++ compiler where to find the .so (shared object) files for each of our targets. When the 'sdl' module is built, it will generate these .so files in its build folder. At the top of this file we created a field named SDL_SO_DIR which points at the build folder location where the .so files can be found.
set_target_properties(
        hidapi
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libhidapi.so
)

set_target_properties(
        sdl2
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2.so
)

set_target_properties(
        sdl2_mixer
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2_mixer.so
)

set_target_properties(
        sdl2_net
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2_net.so
)

set_target_properties(
        mpg123
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libmpg123.so
)

# We will tell our build system where to look for third party header files.
include_directories(${SDL_DIR}/include)
include_directories(${SDL_MIXER_DIR}/include)
include_directories(${SDL_NET_DIR}/include)
include_directories(${FREETYPE_DIR}/include ${FREETYPE_DIR}/freetype/include)
include_directories(${GLM_DIR}/glm)
include_directories(${MAIN_SOURCE_DIR})
include_directories(${EXTERNAL_STB})

# We will recursively collate all .hpp header and .cpp source files under the main source directory as the input for the compilation.
file(GLOB_RECURSE CPP_HEADERS ${MAIN_SOURCE_DIR}/*.h*)
file(GLOB_RECURSE CPP_SOURCES ${MAIN_SOURCE_DIR}/*.cpp)

# The 'a-simple-triangle' library target is actually our own C++ code from the shared 'main' source code folder.
add_library(
        engineAndroid
        SHARED
        ${CPP_HEADERS}
        ${CPP_SOURCES}
)

# Finally, we need to link all the libraries we want to use in our project together, remembering that the 'a-simple-triangle' library is in fact our own C++ code. Note also we are including the 'GLESv2' library for OpenGL ES2 support, though we don't need to define it ourselves with the 'add_library' commands.
target_link_libraries(
        engineAndroid
        hidapi
        sdl2
        sdl2_mixer
        sdl2_net
        mpg123
        freetype
        glm
        ${log-lib}
        GLESv3
)
